#+STARTUP: inlineimages
* Virtual environment
:PROPERTIES:
:header-args: :results drawer
:END:
  #+begin_src bash :dir ~/dev
    virtualenv Python
  #+end_src

  #+RESULTS:
  :results:
  Using base prefix '/Library/Frameworks/Python.framework/Versions/3.7'
  New python executable in /Users/sglee/dev/Python/bin/python3.7
  Not overwriting existing python script /Users/sglee/dev/Python/bin/python (you must use /Users/sglee/dev/Python/bin/python3.7)
  Installing setuptools, pip, wheel...
  done.
  :end:

  #+begin_src elisp :results silent
    (pyvenv-activate "~/dev/Python")
  #+end_src

  #+begin_src bash :async t
    pip3 install numpy matplotlib scipy sympy
  #+end_src

  #+RESULTS:
  :results:
  Collecting numpy
    Using cached https://files.pythonhosted.org/packages/a6/6f/cb20ccd8f0f8581e0e090775c0e3c3e335b037818416e6fa945d924397d2/numpy-1.16.2-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl
  Collecting matplotlib
    Using cached https://files.pythonhosted.org/packages/2e/81/bb51214944e79f9c9261badd7ef99b573fb0bc9110c0075c6a9e76224d0d/matplotlib-3.0.3-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl
  Collecting scipy
    Using cached https://files.pythonhosted.org/packages/dd/6c/ccf7403d14f0ab0f20ce611696921f204f4ffce99a4fd383c892a6a7e9eb/scipy-1.2.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl
  Collecting sympy
  Collecting pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 (from matplotlib)
    Using cached https://files.pythonhosted.org/packages/de/0a/001be530836743d8be6c2d85069f46fecf84ac6c18c7f5fb8125ee11d854/pyparsing-2.3.1-py2.py3-none-any.whl
  Collecting kiwisolver>=1.0.1 (from matplotlib)
    Using cached https://files.pythonhosted.org/packages/68/f2/21ec13269a420c063a3d7d8c87dac030da7b00fc6b27fa88cfb1c72a645b/kiwisolver-1.0.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl
  Collecting cycler>=0.10 (from matplotlib)
    Using cached https://files.pythonhosted.org/packages/f7/d2/e07d3ebb2bd7af696440ce7e754c59dd546ffe1bbe732c8ab68b9c834e61/cycler-0.10.0-py2.py3-none-any.whl
  Collecting python-dateutil>=2.1 (from matplotlib)
    Using cached https://files.pythonhosted.org/packages/41/17/c62faccbfbd163c7f57f3844689e3a78bae1f403648a6afb1d0866d87fbb/python_dateutil-2.8.0-py2.py3-none-any.whl
  Collecting mpmath>=0.19 (from sympy)
  Requirement already satisfied: setuptools in ./lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib) (40.8.0)
  Collecting six (from cycler>=0.10->matplotlib)
    Using cached https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl
  Installing collected packages: numpy, pyparsing, kiwisolver, six, cycler, python-dateutil, matplotlib, scipy, mpmath, sympy
  Successfully installed cycler-0.10.0 kiwisolver-1.0.1 matplotlib-3.0.3 mpmath-1.1.0 numpy-1.16.2 pyparsing-2.3.1 python-dateutil-2.8.0 scipy-1.2.1 six-1.12.0 sympy-1.3
  :end:
* Python Example 
  #+begin_src python :results output link :file images/temp.png :async t
    import matplotlib.pyplot as pylab
    import numpy as np

    t=np.linspace(0,20*np.pi,350)
    x=np.exp(-0.1*t)*np.sin(t)
    y=np.exp(-0.1*t)*np.cos(t)

    pylab.plot(x,y)
    pylab.axis('equal')
    pylab.savefig("images/temp.png")
  #+end_src

  #+RESULTS:
  [[file:images/temp.png]]






* Pycse from [[https://kitchingroup.cheme.cmu.edu/pycse/pycse.html#org1d19e65][kitchin]]
  :PROPERTIES:
  :header-args:python:
  :END:

** Functions
   :PROPERTIES:
   :header-args:python: :session funcs
   :END:
   #+begin_src python :results output
     import numpy as np
     def f(x):
         return x**3-np.log(x)
     print(f(3))
   #+end_src

   #+RESULTS:
   : 25.90138771133189
   #+begin_src python :results output
     def f(x):
         x = np.array(x)
         return 1.0/x**2

     print(f(3))
     print(f([4,5]))
   #+end_src

   #+RESULTS:
   : 0.111111111111
   : [0.0625 0.04  ]
   #+begin_src python :results output
     from scipy.integrate import quad
     print(quad(lambda x:x**3,0,2))
   #+end_src

   #+RESULTS:
   : (4.0, 4.440892098500626e-14)
   #+begin_src python :results link :file images/ode.png
     from scipy.integrate import odeint
     import matplotlib.pyplot as pylab

     k = 2.2
     def myode(y,t):
         return k*y

     y0=3
     tspan = np.linspace(0,1)
     y = odeint(myode,y0,tspan)

     pylab.plot(tspan,y)
     pylab.savefig('images/ode.png')
   #+end_src

   #+RESULTS:
   [[file:images/ode.png]]

   Arbitrary positional arguments, =*args=. The variable =args= is a tuple containing all of the arguments passed to the function.
   #+begin_src python :results output
     def func(*args):
         sum=0
         for arg in args:
             sum += arg
         return sum

     print(func(1,2,3,4))
   #+end_src

   #+RESULTS:
   : 10
   #+begin_src python :results output
     import functools, operator
     def func(*args):
         return functools.reduce(operator.add,args)
     print(func(1,2,3,4))
   #+end_src

   #+RESULTS:
   : 10
   Arbitrary keyword arguments
   #+begin_src python :results output
     def func(**kwargs):
         for kw in kwargs:
             print('{0} = {1}'.format(kw,kwargs[kw]))

     func(t1=6,color='blue')
   #+end_src

   #+RESULTS:
   : color = blue
   : t1 = 6
   #+begin_src python :results link :file images/fig2.png
     def myplot(x,y,fname=None,**kwargs):
         "make plot of x,y. save to fname if not None. Provide kwargs to plot."
         pylab.plot(x,y,**kwargs)
         pylab.xlabel('X')
         pylab.ylabel('Y')
         pylab.title('My Plot')
         if fname:
             pylab.savefig(fname)
         else:
             pylab.show()

     x = [1,3,4,5]
     y = [3,6,9,12]

     pylab.figure(1)
     myplot(x,y,'images/exm.png',color='orange',marker='s')

     pylab.figure(2)
     d = {'color':'magenta','marker':'d'}
     myplot(x,y,'images/fig2.png',**d)
   #+end_src

   #+RESULTS:
   [[file:images/fig2.png]]

   Lambda
   #+begin_src python :results output
     f = lambda x: 2*x
     print(f)
     print(f(2))
   #+end_src

   #+RESULTS:
   : <function <lambda> at 0x7ff9a48f8668>
   : 4
   #+begin_src python :results output
     f = lambda **kwargs: kwargs

     print(f(a=1,b=3))
   #+end_src

   #+RESULTS:
   : {'a': 1, 'b': 3}
   #+begin_src python :results output
     from scipy.optimize import fsolve

     sol, = fsolve(lambda x:2.5-np.sqrt(x),8)
     print(sol)
   #+end_src

   #+RESULTS:
   : 6.25000000000001
   #+begin_src python :results output
     def func(x,a):
         return a*np.sqrt(x)-4.0

     sol,=fsolve(lambda x:func(x,3.2),3)
     print(sol)
   #+end_src

   #+RESULTS:
   : 1.5625000000000078
   #+begin_src python :results link :file images/cos.png
     x = np.linspace(0,np.pi,10)
     pylab.figure(3)
     pylab.plot(x,np.cos(x))
     pylab.savefig('images/cos.png')
   #+end_src

   #+RESULTS:
   [[file:images/cos.png]]

** Data structure
   #+begin_src python :results output 
     c = ['benzene',6.9056,1211.0,220.79,[-16,104]]
     print(c[0])
     print(c[-1])

     a,b=c[0:2]
     print(a,b)

     name, A, B, C, Trange = c
     print(Trange)
   #+end_src

   #+RESULTS:
   : benzene
   : [-16, 104]
   : ('benzene', 6.9056)
   : [-16, 104]

   Tuples are immutable.
   #+begin_src python :results output
     a = (3, 4, 5, [7,8], 'cat')
     print(a[0],a[-1])
   #+end_src

   #+RESULTS:
   : (3, 'cat')
   #+begin_src python :results output
     class Antoine:
         pass

     a = Antoine()
     a.name = 'benzene'
     a.Trange = [-16,104]

     print(a.name)
     print(hasattr(a, 'Trange')) # has attribute??
     print(hasattr(a, 'A'))
   #+end_src

   #+RESULTS:
   : benzene
   : True
   : False

   #+begin_src python :results output
     s = {'name':'benzene',
          'A':6.9056,
          'B':1211.1}

     s['C'] = 220.79
     s['Trange'] = [-16,104]

     print(s)
     print(s['Trange'])
   #+end_src

   #+RESULTS:
   : {'A': 6.9056, 'C': 220.79, 'B': 1211.1, 'name': 'benzene', 'Trange': [-16, 104]}
   : [-16, 104]

   #+begin_src python :results output
     s = {'name':'benzene',
          'A':6.9056,
          'B':1211.0}

     print('C' in s)
     print(s.get('C',None))
     print(s.keys())
     print(s.values())
   #+end_src

   #+RESULTS:
   : False
   : None
   : ['A', 'B', 'name']
   : [6.9056, 1211.0, 'benzene']
   #+begin_src python :results output
     print('The value of 1/3 to 3 decimal places is {0:1.3f}'.format(1./3.))

     for x in [1./3.,1./6.,1./9.]:
         print('The answer is {0:1.2f}'.format(x))

     import numpy as np
     eps = np.finfo(np.double).eps
     print('{0:1.3e}'.format(eps))

     print('The fraction {0} corresponds to {0:1.0%}'.format(0.78))
   #+end_src

   #+RESULTS:
   : The value of 1/3 to 3 decimal places is 0.333
   : The answer is 0.33
   : The answer is 0.17
   : The answer is 0.11
   : 2.220e-16
   : The fraction 0.78 corresponds to 78%
   #+begin_src python :results output
     s = 'The {speed} {color} fox'.format(color='brown',speed='quick')
     print(s)
   #+end_src

   #+RESULTS:
   : The quick brown fox
   #+begin_src python :results output
     speed = 'slow'
     color = 'blue'

     print('The {speed} {color} fox'.format(**locals()))
   #+end_src

   #+RESULTS:
   : The slow blue fox

   #+begin_src python :results output
     class A:
         def __init__(self,a,b,c):
             self.a = a
             self.b = b
             self.c = c

     mya = A(3,4,5)

     print('a = {obj.a}, b = {obj.b}, c = {obj.c:1.2f}'.format(obj=mya))
   #+end_src

   #+RESULTS:
   : a = 3, b = 4, c = 5.00

   #+begin_src python :results output
     d = {'a': 56, "test":'woohoo!'}
     print("the value of a in the dictionary is {obj[a]}. It works {obj[test]}".format(obj=d))
   #+end_src

   #+RESULTS:
   : the value of a in the dictionary is 56. It works woohoo!

   #+begin_src python :results output
     L = [4, 5, 'cat']

     print('element 0 = {obj[0]}, and the last element is {obj[2]}'.format(obj=L))
   #+end_src

   #+RESULTS:
   : element 0 = 4, and the last element is cat

   #+begin_src python :results output
     class A:
         def __init__(self,a,b):
             self.a = a; self.b = b

         def __format__(self,format):
             s = 'a={{0:{0}}} b={{1:{0}}}'.format(format)
             return s.format(self.a, self.b)

         def __str__(self):
             return 'str: class A, a={0} b={1}'.format(self.a,self.b)

         def __repr__(self):
             return 'representing: class A, a={0}, b={1}'.format(self.a,self.b)

     mya = A(3,4)

     print('{0}'.format(mya))        # use format
     print('{0!s}'.format(mya))      # use str
     print('{0!r}'.format(mya))      # use repr
   #+end_src

   #+RESULTS:
   : a=3 b=4
   : str: class A, a=3 b=4
   : representing: class A, a=3, b=4

** Math 
Numeric derivatives
#+begin_src python :results link :file images/simple-diffs.png
  import numpy as np
  import pylab
  import time

  x = np.linspace(0.78,0.79,100)
  y = np.sin(x)
  dy_analytical = np.cos(x)

  tf1 = time.time()
  dyf = [0.0]*len(x)
  for i in range(len(y)-1):
      dyf[i] = (y[i+1]-y[i])/(x[i+1]-x[i])
  dyf[-1] = (y[-1]-y[-2])/(x[-1]-x[-2])

  print(' Forward difference took %f seconds' % (time.time()-tf1))

  tb1 = time.time()
  dyb = [0.0]*len(x)
  dyb[0] = (y[0]-y[1])/(x[0]-x[1])
  for i in range(1,len(y)):
      dyb[i] = (y[i]-y[i-1])/(x[i]-x[i-1])
  print(' Backward difference took %f seconds' % (time.time()-tb1))

  tc1 = time.time()
  dyc = [0.0]*len(x)
  dyc[0] = (y[0]-y[1])/(x[0]-x[1])
  for i in range(1,len(x)-1):
      dyc[i]=(y[i+1]-y[i-1])/(x[i+1]-x[i-1])
  dyc[-1] = (y[-1]-y[-2])/(x[-1]-x[-2])
  print(' Centered difference took %f seconds' % (time.time()-tc1))

  pylab.plot(x,dy_analytical,label='analytical derivative')
  pylab.plot(x,dyf,'--',label='forward')
  pylab.plot(x,dyb,'--',label='backward')
  pylab.plot(x,dyc,'--',label='centered')

  pylab.legend(loc='lower left')
  pylab.savefig('images/simple-diffs.png')
#+end_src

#+RESULTS:
[[file:images/simple-diffs.png]]

vectorized numeric derivatives
#+begin_src python :results link :file images/vectorized-diffs.png 
  import numpy as np
  import pylab

  x = np.linspace(0,2*np.pi,100)
  y = np.sin(x)
  dy_analytical = np.cos(x)

  dy = np.zeros(y.shape,np.float)
  dy[0:-1]=np.diff(y) / np.diff(x)
  dy[-1] = (y[-1]-y[-2])/(x[-1]-x[-2])

  dy2 = np.zeros(y.shape,np.float)
  dy2[1:-1] = (y[2:]-y[0:-2])/(x[2:]-x[0:-2])
  dy2[0] = (y[1]-y[0])/(x[1]-x[0])
  dy2[-1] = (y[-1]-y[-2])/(x[-1]-x[-2])

  pylab.plot(x,y)
  pylab.plot(x,dy_analytical,label='analytical derivative')
  pylab.plot(x,dy,label='forward diff')
  pylab.plot(x,dy,'k--',lw=2,label='centered diff')
  pylab.legend(loc='lower left')

  pylab.savefig('images/vectorized-diffs.png')
#+end_src

#+RESULTS:
[[file:images/vectorized-diffs.png]]


Piecewise function
#+begin_src python :results output
  def f1(x):
      if x<0:
          return 0
      elif (x>=0) & (x<1):
          return x
      elif (x>=1) & (x<2):
          return 2.0 - x
      else:
          return 0

  print(f1(-1))
#+end_src

#+RESULTS:
: 0
Vectorize the piecewise function
#+begin_src python :results link :file images/vector-piecewise.png 
  import numpy as np
  def f2(x):
      x = np.asarray(x)
      y = np.zeros(x.shape)
      y += ((x>=0) & (x<1)) * x
      y += ((x>=1) & (x<2)) * (2-x)
      return y
  x = np.linspace(-1,3,1000)
  import matplotlib.pyplot as plt
  plt.plot(x,f2(x))
  plt.tight_layout()
  plt.savefig('images/vector-piecewise.png')
  print(f2(x))
#+end_src

#+RESULTS:
[[file:images/vector-piecewise.png]]

#+begin_src python :results output
  from scipy.interpolate import interp1d
  from scipy.integrate import quad
  import numpy as np
  x = [0, 0.5, 1, 1.5, 2]
  y = [0, 0.1250, 1.0000, 3.3750, 8.0000]

  f = interp1d(x,y)

  xfine = np.linspace(0.25,1.75)
  yfine = f(xfine)
  print(np.trapz(yfine,xfine))
  ans, err = quad(f,0.25,1.75)
  print(ans)
#+end_src

#+RESULTS:
: 2.531991878384006
: 2.53125

#+begin_src python :results output
  import numpy as np
  import time

  a = 0.0; b = np.pi;
  N = 1000

  h = (b-a)/N
  x = np.linspace(a,b,N)
  y = np.sin(x)

  t0 = time.time()
  f = 0.0
  for k in range(len(x)-1):
      f += 0.5*((x[k+1]-x[k])*(y[k+1]+y[k]))
  tf = time.time()-t0
  print('time elapsed = {0} sec'.format(tf))

  print(f)

  t0 = time.time()
  Xk = x[1:-1]-x[0:-2]
  Yk = y[1:-1]+y[0:-2]
  f = 0.5*np.sum(Xk*Yk)
  tf = time.time()-t0
  print('\ntime elapsed = {0} sec'.format(tf))
  print(f)

  t0 = time.time()
  f = 0.5*np.dot(Xk,Yk)
  tf = time.time() - t0
  print('\ntime elapsed = {0} sec'.format(tf))
  print(f)
#+end_src

#+RESULTS:
: time elapsed = 0.00124907493591 sec
: 1.9999983517708524
: 
: time elapsed = 2.90870666504e-05 sec
: 1.9999934070923728
: 
: time elapsed = 7.86781311035e-06 sec
: 1.999993407092373

Double integrals
#+begin_src python :results output
  from scipy.integrate import dblquad
  import numpy as np

  def integrand(y,x):
      return y*np.sin(x) + x*np.cos(y)

  ans,err = dblquad(integrand,np.pi,2*np.pi,lambda x:0,lambda x:np.pi)

  print(ans)
#+end_src

#+RESULTS:
: -9.86960440109

Symbolic math
#+begin_src python :results output
  from sympy import solve, symbols, pprint

  a,b,c,x = symbols('a,b,c,x')

  f = a*x**2 + b*x + c

  solution = solve(f,x)
  print(solution)
  pprint(solution)
#+end_src

#+RESULTS:
: [(-b + sqrt(-4*a*c + b**2))/(2*a), -(b + sqrt(-4*a*c + b**2))/(2*a)]
:          _____________   /       _____________\  
:         /           2    |      /           2 |  
:  -b + \/  -4*a*c + b    -\b + \/  -4*a*c + b  /  
: [---------------------, ------------------------]
:           2*a                     2*a            


#+begin_src python :results output
  import sympy
  from sympy import *
  import numpy as np

  a,b,x = symbols('a,b,x')
  f = sympy.ln(x)+a*x**2+b*x
  print(diff(f,x))
#+end_src

#+RESULTS:
: 2*a*x + b + 1/x

#+begin_src python :results output
  from sympy import Function, Symbol, dsolve
  f = Function('f')
  x = Symbol('x')
  fprime = f(x).diff(x) - f(x) # f' = f(x)

  y = dsolve(fprime, f(x))

  print(y)
  print(y.subs(x,4))
#+end_src

#+RESULTS:
: Eq(f(x), C1*exp(x))
: Eq(f(4), C1*exp(4))

#+begin_src python :results output
  import sympy
  from sympy import symbols, solve, pprint, Eq
  from sympy.plotting import plot, plot_implicit
  import time

  x,y = symbols('x,y')

  f = x**2 + y**2 + 1

  solution = solve(f,x)

  t0 = time.time()
  plot(x,f)
  print('plot time is {} seconds'.format(time.time()-t0))
  #plot_implicit(Eq(x**2+y**2-1))
#+end_src

#+RESULTS:

#+begin_src python :results output
  import numpy as np
  print(np.spacing(1))

  def feq(x,y,eps):
      return not ((x<(y-eps)) or (y<(x-eps)))

  print(feq(1.0,49.0*(1.0/49.0),np.spacing(1)))
#+end_src

#+RESULTS:
: 2.220446049250313e-16
: True

#+begin_src python :results output :tangle test.py
  import numpy as np

  a = np.array([0,1,2])
  print(a.shape)
  print(a)
  print(a.T)

  print(np.dot(a,a))
  print(np.dot(a,a.T))

  print(a @ a)
#+end_src

#+RESULTS:
: (3,)
: [0 1 2]
: [0 1 2]
: 5
: 5
: 5

#+begin_src python :results output
  import numpy as np

  b = np.array([[0,1,2]])
  print(b.shape)
  print(b)
  print(b.T)

  print(b @ b.T)
#+end_src

#+RESULTS:
: (1, 3)
: [[0 1 2]]
: [[0]
:  [1]
:  [2]]
: [[5]]

Solving linear equations
#+begin_src python :results output
  import numpy as np
  A = np.array([[1,-1,1],
               [0,10,25],
               [20,10,0]])

  b = np.array([0,90,80])

  x = np.linalg.solve(A,b)

  print(x)
  print(A @ x)

  print(A@x==b)
  tol = 1e-12
  print(np.abs(A@x-b)<=tol)

  u,s,v = np.linalg.svd(A)
  print('Singular values: {0}'.format(s))
  print('# of independent rows: {0}'.format(np.sum(np.abs(s) > tol)))

  B = np.array([[1,-1,1],
                [0,10,25],
                [0,20,50]])
  u,s,v = np.linalg.svd(B)
  print('Singular values: {0}'.format(s))
  print('# of independent rows: {0}'.format(np.sum(np.abs(s)>tol)))
#+end_src

#+RESULTS:
: [2. 4. 2.]
: [2.66453526e-15 9.00000000e+01 8.00000000e+01]
: [False  True  True]
: [ True  True  True]
: Singular values: [27.63016717 21.49453733  1.5996022 ]
: # of independent rows: 3
: Singular values: [60.21055203  1.63994657 -0.        ]
: # of independent rows: 2

#+begin_src python :results output
  a = [1,2,3,4,5]
  b = [3,6,8,9,10]

  sum = 0
  for x,y in zip(a,b):
      sum += x*y
  print(sum)

  import numpy as np
  import time
  w = np.array([0.1,0.25,0.12,0.45,0.98,0.5,0.6,0.7])
  x = np.array([9,7,11,12,8,5,10,25])
  t0 = time.time()
  y = np.sum(w*x**2)
  print('time {0}'.format(time.time()-t0))
  print(y)
  t0 = time.time()
  y = x@np.diag(w)@x
  print('time {0}'.format(time.time()-t0))
  print(y)
#+end_src

#+RESULTS:
: 125
: time 4.601478576660156e-05
: 672.39
: time 5.14984130859375e-05
: 672.39

#+begin_src python :results output
  import numpy as np
  v1 = [6,0,3,1,4,2]
  v2 = [0,-1,2,7,0,5]
  v3 = [12,3,0,-19,8,-11]

  A = np.row_stack([v1,v2,v3])
  print(A)

  eps = np.finfo(np.linalg.norm(A).dtype).eps
  tol = max(eps*np.array(A.shape))

  print(eps,tol)

  u,s,v = np.linalg.svd(A)
  print(s)
  print(np.sum(s>tol))
  tol2 = 1e-14
  print(np.sum(s>tol2))

  A = np.column_stack([v1,v2])
  x = np.linalg.lstsq(A,v3)
  print(x[0])
#+end_src

#+RESULTS:
: [[  6   0   3   1   4   2]
:  [  0  -1   2   7   0   5]
:  [ 12   3   0 -19   8 -11]]
: 2.220446049250313e-16 1.3322676295501878e-15
: [2.75209239e+01 9.30584482e+00 1.42425400e-15]
: 3
: 2
: [ 2. -3.]
#+begin_src python :results output
  import numpy as np

  A = [[1,2,3],
       [0,2,3],
       [0,0,1e-6]]

  u,s,v = np.linalg.svd(A)
  print(s)
  print(np.sum(np.abs(s)>1e-15))
  print(np.sum(np.abs(s)>1e-5))
#+end_src

#+RESULTS:
: [5.14874857e+00 7.00277208e-01 5.54700196e-07]
: 3
: 2

** Chemical reaction
   #+begin_src python :results output
     import numpy as np

     M = [[-1,0,-1,0,2],
          [0,0,-1,2,0],
          [-1,1,0,-1,1],
          [0,-1,-1,1,1],
          [1,-1,0,1,-1],
          [0,0,1,-2,0]]

     u,s,v = np.linalg.svd(M)
     print(s)
     print(np.sum(np.abs(s) > 1e-15))

     import sympy
     M = sympy.Matrix(M)
     reduced_form, inds = M.rref()
     print(reduced_form)
     Mr = np.array(reduced_form)
     print(Mr)
     print(inds)

     labels = ['H2', 'H', 'Br2', 'Br', 'HBr']
     for row in reduced_form.tolist():
         s = '0 = '
         for nu,species in zip(row,labels):
             if nu != 0:
                 s += ' {0:+d}{1}'.format(int(nu), species)
         if s != '0 = ':
             print(s)
   #+end_src

   #+RESULTS:
   #+begin_example
   [3.84742803e+00 3.32555975e+00 1.46217301e+00 1.03409112e-16
    0.00000000e+00]
   3
   Matrix([[1, 0, 0, 2, -2], [0, 1, 0, 1, -1], [0, 0, 1, -2, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
   [[1 0 0 2 -2]
    [0 1 0 1 -1]
    [0 0 1 -2 0]
    [0 0 0 0 0]
    [0 0 0 0 0]
    [0 0 0 0 0]]
   (0, 1, 2)
   0 =  +1H2 +2Br -2HBr
   0 =  +1H +1Br -1HBr
   0 =  +1Br2 -2Br
   #+end_example

   #+begin_src python :results output
     import numpy as np
     from scipy.linalg import lu

     A = np.array([[6,2,3],
                   [1,1,1],
                   [0,4,9]])
     B = [[6,2,3],
          [1,1,1],
          [0,4,9]]

     p,l,u = lu(A)
     p2,l2,u2 = lu(B)

     print(p)
     print(np.diag(p))
     print(len(np.diag(p)))
     nswaps = len(np.diag(p)) - np.sum(np.diag(p)) -1
     detP = (-1)**nswaps
     detL = np.prod(np.diag(l))
     detU = np.prod(np.diag(u))

     print(detP*detL*detU)
     print(np.linalg.det(A))

   #+end_src

   #+RESULTS:
   : [[1. 0. 0.]
   :  [0. 0. 1.]
   :  [0. 1. 0.]]
   : [1. 0. 0.]
   : 3
   : 24.0
   : 23.999999999999993

   #+begin_src python :results output
     import scipy.linalg.lapack as la
     import numpy as np

     n = 10000
     A = np.random.rand(n,n)
     Ab = np.zeros((n+1,n),dtype=np.complex)
     kl,ku = n-1,n-1

     for j in range(1,n+1):
         for i in range(max(1,j-ku),min(n,j+kl)+1):
             Ab[kl+ku+1+i-j-1,j-1]=A[i-1,j-1]

     b = np.random.rand(n,1)
     import time
     t0 = time.time()
     lub,piv,x,info = la.flapack.zgbsv(n,kl,ku,Ab,b)
     print("time for lapack is {0}".format(time.time()-t0))

     print(x)

     t0 = time.time()
     c = np.linalg.solve(A,b)
     print('built in solver time is {0}'.format(time.time()-t0))
     print(c)
   #+end_src

   #+RESULTS:

   #+begin_src python :results link :file images/nonlinear.png :session nl
     import numpy as np
     from scipy.integrate import odeint
     import matplotlib.pyplot as plt

     m = 1.0
     L = m**3/1000.0
     mol = 1.0
     s = 1.0

     Cao = 2.0*mol/L
     V = 10.0*L
     nu = 0.5*L/s
     k = 0.23*L/mol/s

     def func(Ca):
         return V-nu*(Cao-Ca)/(k*Ca**2)

     c = np.linspace(0.001,2)*mol/L
     plt.clf()
     plt.plot(c,func(c))
     plt.ylim([-0.1,0.1])
     plt.savefig('images/nonlinear.png')
   #+end_src

   #+RESULTS:
   [[file:images/nonlinear.png]]

   #+begin_src python :results output :session nl
     from scipy.optimize import fsolve

     cguess = 500
     c, = fsolve(func,cguess)
     print(c)
     print(func(c))
     print(func(c)/(mol/L))
   #+end_src

   #+RESULTS:
   : 559.5837456060607
   : -1.734723475976807e-18
   : -1.734723475976807e-21

   #+begin_src python :results link :file images/integ.png :session nl
     from scipy.integrate import quad

     k = 0.23
     nu = 10.0
     Fao = 1.0

     def integrand(Fa):
         return -1.0/(k*Fa/nu)

     def integ(Fa):
         integral, err = quad(integrand,Fao,Fa)
         return 100.0 - integral
     vfunc = np.vectorize(integ)

     f = np.linspace(0.01,1)
     
     plt.clf()
     plt.plot(f,vfunc(f))
     plt.savefig('images/integ.png')
   #+end_src

   #+RESULTS:
   [[file:images/integ.png]]
   #+begin_src python :results output :session nl
     Fa_guess = 0.1
     Fa_exit, = fsolve(vfunc,Fa_guess)
     print('The exit concentration is {0:1.2f} mol/L'.format(Fa_exit/nu))
   #+end_src

   #+RESULTS:
   : The exit concentration is 0.01 mol/L

   #+begin_src python :results link :file images/odefitting.png :exports both
     import numpy as np
     from scipy.optimize import curve_fit
     from scipy.integrate import odeint
     import matplotlib.pyplot as plt

     tspan = [0,0.1,0.2,0.4,0.8,1]
     Ca_data = [2.0081,  1.5512,  1.1903,  0.7160,  0.2562,  0.1495]

     def fitfunc(t,k):
         def myode(Ca,t):
             return -k*Ca
         Ca0 = Ca_data[0]
         Casol = odeint(myode,Ca0,t)
         return Casol[:,0]

     k_fit, kcov = curve_fit(fitfunc, tspan, Ca_data, p0=1.3)

     tfit = np.linspace(0,1)
     fit = fitfunc(tfit,k_fit)

     plt.plot(tspan,Ca_data,'ro',label='data')
     plt.plot(tfit,fit,'b-',label='fit')
     plt.legend(loc='best')
     plt.savefig('images/odefitting.png')
   #+end_src

   #+RESULTS:
   [[file:images/odefitting.png]]
 
   #+begin_src python :results graphics :file images/odefitting.png :exports both
     import numpy as np
     from scipy.optimize import curve_fit
     from scipy.integrate import odeint
     import matplotlib.pyplot as plt

     tspan = [0,0.1,0.2,0.4,0.8,1]
     Ca_data = [2.0081,  1.5512,  1.1903,  0.7160,  0.2562,  0.1495]

     def fitfunc(t,k):
         def myode(Ca,t):
             return -k*Ca
         Ca0 = Ca_data[0]
         Casol = odeint(myode,Ca0,t)
         return Casol[:,0]

     k_fit, kcov = curve_fit(fitfunc, tspan, Ca_data, p0=1.3)

     tfit = np.linspace(0,1)
     fit = fitfunc(tfit,k_fit)

     plt.plot(tspan,Ca_data,'ro',label='data')
     plt.plot(tfit,fit,'b-',label='fit')
     plt.legend(loc='best')
     plt.savefig('images/odefitting.png')
   #+end_src

   #+RESULTS:
   [[file:images/odefitting.png]]

   #+begin_src python :results link :file images/tank.png
     import numpy as np
     from scipy.integrate import odeint
     import matplotlib.pyplot as plt

   #+end_src
