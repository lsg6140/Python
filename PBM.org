#+startup: latexpreview
* A discretized population balance for nucleation, growth, and aggregation
** Population balance
The population balance for a well-mixed batch system of constant volume is given as

\begin{equation}
\frac{\partial n}{\partial t}+\frac{\partial(Gn)}{\partial L}=B-D
\end{equation}
\(n\) is the number-density function: If there are $dN$ particles per unit volume of suspension in the size range $L$ to $dL$, then at that size and time the density function is $n=dN/dL$. 
*** Aggregation
Birth rate by aggregation
\begin{align}
B'(v)&=\frac{1}{2}\int_0^v\beta'(v-\epsilon,\epsilon)n'(v-\epsilon)n'(\epsilon)d\epsilon\\
D'(v)&=n'(v)\int_0^\infty\beta'(v,\epsilon)n'(\epsilon)d\epsilon
\end{align}
The prime is used to signify volume as the internal coordinate. The coalescence kernel, $\beta'(v,\epsilon)$, is a measure of the frequency of collisions between particles of volume $v$ and $\epsilon$. Transform to length results
\begin{align}
B(L)=&\frac{L^2}{2}\int_0^L\frac{\beta[(L^3-\lambda^3)^{1/3},\lambda]n[(L^3-\lambda^3)^{1/3}]n(\lambda)}{(L^3-\lambda^3)^{2/3}}d\lambda\\
D(L)=&n(L)\int_0^\infty\beta(L,\lambda)n(\lambda)d\lambda
\end{align}
** Moment transform
The \(j\)th moment is defined as
$$m_j=\int_0^\infty L^jn(L)dL$$
The first four moments are related to total number, length, area, and volume of solid per unit volume of suspension by
\begin{align}
N_T=&m_0\\
L_T=&k_Lm_1\\
A_T=&k_Am_2\\
V_T=&k_Vm_3
\end{align}
Values of shape factors depend on the shape of particles. 
** Discrete population balance model
Geometric discretization with $L_{i+1}/L_i=\sqrt[3]{2}$, for great range of sizes.

#+tblname: Binary interaction mechanisms for aggregation
| Mechanism | Birth or Death in Interval $i$ | Collision between Particles in Intervals |
|-----------+--------------------------------+------------------------------------------|
|         1 | Birth                          | $i-1$   $1\to i-2$                       |
|         2 | Birth                          | $i-1$   $i-1$                            |
|         3 | Death                          | $i$     $1\to i-1$                       |
|         4 | Death                          | $i$     $i\to\infty$                     |
|-----------+--------------------------------+------------------------------------------|

The smallest size in the \(i\)th interval is $2^i$ and the largest size is $2^{i+1}$. The density function in this interval is given by \(n'=N_i/2^i\)
*** Mechanism 1
Consider the aggregation of a particle size $a$ (volume) in the \(j\)th interval, where \(j < i-1\). In order to form a particle in the \(i\)th interval it must collide with particles in the size range $2^i-a\leq v<2^i$, all of which are in the \((i-1)\)th interval. The number of particles available in $2^i-a\leq v<2^i$ is $a\times n'_{i-1}$ (volume range \(\times\) number density). Therefore the number of particles for collision is $aN_{i-1}/2^{i-1}$.
The differential rate of aggregation $dR^{[1]}$ for particle size \(a < s < a+da\) is
\begin{align*}
dR_{i,j}^{[1]}=&\beta\frac{aN_{i-1}}{2^{i-1}}dN\\
              =&\beta\frac{aN_{i-1}}{2^{i-1}}n'(a)da\\
              =&\beta\frac{aN_{i-1}}{2^{i-1}}\frac{N_j}{2^j}da
\end{align*}
Let $\beta=\beta_{i-1,j}$, then
\begin{align*}
R_{i,j}^{[1]}=&\beta_{i-1,j}\int_{2^j}^{2^{j+1}}a2^{1-i-j}N_{i-1}N_jda\\
             =&\beta_{i-1,j}2^{1-i-j}N_{i-1}N_j\int_{2^j}^{2^{j+1}}ada\\
             =&\beta_{i-1,j}2^{1-i-j}N_{i-1}N_j\left[\frac{a^2}{2}\right]_{2^j}^{2^{j+1}}\\
             =&\beta_{i-1,j}2^{1-i-j}N_{i-1}N_j\cdot3\cdot2^{2j-1}\\
             =&3\cdot2^{j-1}\beta_{i-1,j}N_{i-1}N_j
\end{align*}
Aggregation birth by mechanism 1 in \(i\)th interval is
\begin{equation}
R_i^{[1]}=3N_{i-1}\sum_{j=1}^{i-2}2^{j-i}\beta_{i-1,j}N_j
\end{equation}
Mechanism 1 applies to the range \(3\sim n\) \\
Caveat: Here, \(a\) is treated as a continuous variable. Therefore, it needs some correction factor for discretized variable.
*** Mechanism 2
Collision of particles both in \((i-1)\)th interval forms particle size in \(i\)th interval. The number of particles available is $N_{i-1}$, and the differential rate of birth is
\begin{align*}
dR_i^{[2]}=&\frac{1}{2}\beta_{i-1,i-1}N_{i-1}dN\\
          =&\frac{1}{2}\beta_{i-1,i-1}N_{i-1}\frac{N_{i-1}}{2^{i-1}}da
\end{align*}
Same collision will count twice so it needs the leading term $\frac{1}{2}$.
Sum over the interval $i-1$ is the total rate,
\begin{equation}
R_i^{[2]}=\frac{1}{2}\beta_{i-1,i-1}\int_{2^{i-1}}^{2^i}\frac{N_{i-1}^2}{2^{i-1}}da=\frac{1}{2}\beta_{i-1,i-1}N_{i-1}^2
\end{equation}
Mechanism 2 applies to the range \(2\sim n\)
*** Mechanism 3 
Death in the \(i\)th interval will occur when a particle of size $a$ in the \(j\)th interval aggregates with a particle size \(2^{i+1}-a < s < 2^{i+1}\). The number of particles in this range is $aN_i/2^i$. The differential rate of death is
\begin{align*}
dR_{i,j}^{[3]}=&\beta_{i,j}\frac{aN_i}{2^i}dN\\
              =&\beta_{i,j}\frac{aN_i}{2^i}n'(a)da\\
              =&\beta_{i,j}\frac{aN_i}{2^i}\frac{N_j}{2^j}da
\end{align*}
Integrating over \(j\)th interval,
 \begin{align*}
R_{i,j}^{[3]}&=\int_{2^j}^{2^{j+1}}\beta_{i,j}\frac{aN_iN_j}{2^{i+j}}da\\
         &=\beta_{i,j}\frac{N_iN_j}{2^{i+j}}\left[\frac{a^2}{2}\right]_{2^j}^{2^{j+1}}\\
         &=3\cdot2^{j-i-1}\beta_{i,j}N_iN_j
\end{align*}
By summing this equation over all feasible values of \(j\)
\begin{equation}
R_i^{[3]}=3N_i\sum_{j=1}^{i-1}\beta_{i,j}2^{j-i-1}N_j
\end{equation}
Mechanism 3 applies to the range \(2\sim n-1\)
*** Mechanism 4
Particle in the \(i\)th interval aggregate with a particle larger than \(i\)th interval, a death occurs in the \(i\)th interval. The rate is
\begin{equation}
R_i^{[4]}=N_i\sum_{j=i}^{n-1}\beta_{i,j}N_j
\end{equation}
Caveat: For volume conservation, it is assumped no aggregation death for largest interval (no aggregation death in \(n\)th interval)\\
Mechanism 4 applies to the range \(1\sim n-1\)
Collecting the terms for overall rate with the correction factor \(k\)
\begin{equation}
\frac{dN_i}{dt}=kR_i^{[1]}+R_i^{[2]}-kR_i^{[3]}-R_i^{[4]}
\end{equation}
The \(k\) is the volume correction factor.
*** Zero-th moment
Descretized moment equation is
\begin{equation}
m_j=\sum_i\overline{L_i^j}N_i
\end{equation}
For zero-th moment is
\begin{align*}
\frac{dm_0}{dt}=&\sum_i\frac{dN_i}{dt}\\
               =&\sum_{i=3}^n\sum_{j=1}^{i-2}3k\beta2^{j-i}N_{i-1}N_j\\
                &+\sum_{i=2}^n\frac{1}{2}\beta N_{i-1}^2\\
                &-\sum_{i=2}^{n-1}\sum_{j=1}^{i-1}3k\beta2^{j-i-1}N_iN_j\\
                &-\sum_{i=1}^{n-1}\sum_{j=i}^{n-1}\beta N_iN_j
\end{align*}
With some index adjustments and \(\sum_iN_i=m_0\)
\begin{align*}
\frac{dm_0}{dt}=&\sum_i\frac{dN_i}{dt}\\
               =&\sum_{i=2}^{n-1}\sum_{j=1}^{i-1}3k\beta2^{j-i-1}N_iN_j\\
                &+\sum_{i=1}^{n-1}\frac{1}{2}\beta N_i^2\\
                &-\sum_{i=2}^{n-1}\sum_{j=1}^{i-1}3k\beta2^{j-i-1}N_iN_j\\
                &-\sum_{i=1}^{n-1}\sum_{j=i}^{n-1}\beta N_iN_j\\
               =&\sum_{i=1}^{n-1}\frac{1}{2}\beta N_i^2-\sum_{i=1}^{n-1}\sum_{j=i}^{n-1}\beta N_iN_j\\
               =&\beta\left(\sum_{i=1}^{n-1}\frac{1}{2} N_i^2-\sum_{i=1}^{n-1}N_iN_i-\sum_{i=1}^{n-1}\sum_{j=i+1}^{n-1} N_iN_j\right)\\
               =&-\frac{1}{2}\beta\left(\sum_{i=1}^{n-1} N_i^2+2\sum_{i=1}^{n-1}\sum_{j=i+1}^{n-1} N_iN_j\right)\\
               =&-\frac{1}{2}\beta m_0^2           
\end{align*}
which is same with from the continuous moment equation.
*** Third moment
\begin{align*}
\frac{dm_3}{dt}=&\sum_i\overline{L_i^3}\frac{dN_i}{dt}\\
               =&\sum_{i=3}^n\overline{L_i^3}\sum_{j=1}^{i-2}3k\beta2^{j-i}N_{i-1}N_j\\
                &+\sum_{i=2}^n\overline{L_i^3}\frac{1}{2}\beta N_{i-1}^2\\
                &-\sum_{i=2}^{n-1}\overline{L_i^3}\sum_{j=1}^{i-1}3k\beta2^{j-i-1}N_iN_j\\
                &-\sum_{i=1}^{n-1}\overline{L_i^3}\sum_{j=i}^{n-1}\beta N_iN_j\\
\end{align*}
With some index adjustment
\begin{align*}
\frac{dm_3}{dt}=&\sum_i\overline{L_i^3}\frac{dN_i}{dt}\\
               =&\sum_{i=2}^{n-1}\overline{L_{i+1}^3}\sum_{j=1}^{i-2}3k\beta2^{j-i-1}N_iN_j\\
                &+\sum_{i=1}^{n-1}\overline{L_{i+1}^3}\frac{1}{2}\beta N_i^2\\
                &-\sum_{i=2}^{n-1}\overline{L_i^3}\sum_{j=1}^{i-1}3k\beta2^{j-i-1}N_iN_j\\
                &-\sum_{i=1}^{n-1}\overline{L_i^3}\sum_{j=i}^{n-1}\beta N_iN_j\\               =&3k\beta\sum_{i=2}^{n-1}\left(\overline{L_{i+1}^3}-\overline{L_i^3}\right)N_i\sum_{j=1}^{i-1}2^{j-i-1}N_j\\
                &+\beta\sum_{i=1}^{n-1}\left(\frac{1}{2}\overline{L_{i+1}^3}-\overline{L_i^3}\right)N_i^2\\
                &-\beta\sum_{i=1}^{n-1}\overline{L_i^3}N_i\sum_{j=i+1}^{n-1}N_j
\end{align*}
Since \(L_{i+1}^3=2L_i^3\)
\begin{align*}
\frac{dm_3}{dt}=&3k\beta\sum_{i=2}^{n-1}\overline{L_i^3}N_i\sum_{j=1}^{i-1}2^{j-i-1}N_j-\beta\sum_{i=1}^{n-1}\overline{L_i^3}N_i\sum_{j=i+1}^{n-1} N_j\\
               =&\beta\left[\sum_{i=2}^{n-1}\overline{L_i^3}N_i\left(3k\sum_{j=1}^{i-1}2^{j-i-1}N_j-\sum_{j=i+1}^{n-1} N_j\right)-\overline{L_1^3}N_1\sum_{j=2}^{n-1} N_j\right]
\end{align*}
Let \(\overline{L_i^3}=2^i\), then
\begin{align*}
\frac{dm_3}{dt}=&\beta\left[\sum_{i=2}^{n-1} N_i\left(3k\sum_{j=1}^{i-1}2^{j-1}N_j-2^i\sum_{j=i+1}^{n-1}N_j\right)-2N_1\sum_{j=2}^{n-1} N_j\right]\\
\end{align*}
\begin{align*}
\sum_{i=2}^{n-1} &N_i\left(3k\sum_{j=1}^{i-1}2^{j-1}N_j-2^i\sum_{j=i+1}^{n-1}N_j\right)-2N_1\sum_{j=2}^{n-1}N_j\\
    =&N_2\left(3kN_1-2^2\sum_{j=3}^{n-1}N_j\right)\\
     &+N_3\left(3k\sum_{j=1}^22^{j-1}N_j-2^3\sum_{j=4}^{n-1}N_j\right)\\
     &+N_4\left(3k\sum_{j=1}^32^{j-1}N_j-2^4\sum_{j=5}^{n-1}N_j\right)\\
     &\vdots\\
     &+N_{n-2}\left(3k\sum_{j=1}^{n-3}2^{j-1}N_j-2^{n-2}N_{n-1}\right)\\
     &+N_{n-1}\left(3k\sum_{j=1}^{n-2}2^{j-1}N_j\right)\\
     &-2N_1\sum_{j=2}^{n-1}N_j\\
     &=3kN_1N_2\hspace{50 mm}-2^2(N_2N_3+N_2N_4+\cdots+N_2N_{n-2}+N_2N_{n-1})\\
     &+3k(N_1N_3+2N_2N_3)\hspace{31 mm}-2^3(N_3N_4+N_3N_5+\cdots+N_3N_{n-2}+N_3N_{n-1})\\
     &+3k(N_1N_4+2N_2N_4+2^2N_3N_4)\hspace{15 mm}-2^4(N_4N_5+N_4N_6+\cdots+N_4N_{n-2}+N_4N_{n-1})\\
     &\vdots\\
     &+3k(N_1N_{n-2}+2N_2N_{n-2}+\cdots+2^{n-5}N_{n-4}N_{n-2}+2^{n-4}N_{n-3}N_{n-2})-2^{n-2}(N_{n-2}N_{n-1})\\
     &+3k(N_1N_{n-1}+2N_2N_{n-1}+\cdots+2^{n-4}N_{n-3}N_{n-1}+2^{n-3}N_{n-2}N_{n-1})\\
     &-2(N_1N_2+N_1N_3+\cdots+N_1N_{n-1}+N_1N_{n-1})\\\\
     &=(3k-2)(N_1N_2+N_1N_3+\cdots+N_1N_{n-1})\\
     &+2(3k-2)(N_2N_3+N_2N_4+\cdots+N_2N_{n-1})\\
     &\vdots\\
     &+2^{n-3}(3k-2)(N_{n-2}N_{n-1})\\
\end{align*}
Third moment is total volume of particles which must be preserved. Therefore, \(k=2/3\) to make \(dm_3/dt=0\)
*** Discretized aggregation model
Therefore, the complete eqation is
\begin{equation}
\begin{aligned}
\frac{dN_i}{dt}=&N_{i-1}\sum_{j=1}^{i-2}2^{j-i+1}\beta_{i-1,j}N_j\quad(3<i<n)\\
                &+\frac{1}{2}\beta_{i-1,i-1}N_{i-1}^2\quad(2<i<n)\\
                &-N_i\sum_{j=1}^{i-1}\beta_{i,j}2^{j-i}N_j\quad(2<i<n-1)\\
                &-N_i\sum_{j=i}^{n-1}\beta_{i,j}N_j\quad(1<i<n-1)
\end{aligned}
\end{equation}
*** Aggregation function code
    #+name: libraries
    #+begin_src python :session pbm :exports none
      import numpy as np
      import matplotlib.pyplot as plt
    #+end_src

    #+RESULTS: libraries

    #+name: aggregation
    #+begin_src python :session pbm :exports code :results output
      # Y contains moment terms. Last four elements are moment terms.
      def aggregation(Y,beta,L):
          n = len(Y)-4
          N = Y[0:n]
          R1 = np.zeros(n)
          R2 = np.zeros(n)
          R3 = np.zeros(n)
          R4 = np.zeros(n)

          # Python index starts with 0!
          # Mechanism 1
          for i in range(2,n):
              for j in range(i-2):
                  R1[i]=R1[i]+N[i-1]*2**(j-i+1)*beta[i-1][j]*N[j]

          # Mechanism 2
          for i in range(1,n):
              R2[i]=beta[i-1][i-1]*N[i-1]**2/2

          # Mechanism 3
          for i in range(1,n-1):
              for j in range (0,i-1):
                  R3[i]=R3[i]+N[i]*beta[i][j]*2**(j-i)*N[j]

          # Mechanism 4
          for i in range(n-1):
              for j in range(i,n-1):
                  R4[i]=R4[i]+N[i]*beta[i][j]*N[j]

          dNdt = R1+R2-R3-R4
          m0 = np.sum(dNdt)
          m1 = np.sum(L@dNdt)
          m2 = np.sum(np.power(L,2)@dNdt)
          m3 = np.sum(np.power(L,3)@dNdt)
          dydt = np.append(dNdt,[m0,m1,m2,m3])
          return dydt
    #+end_src

    #+RESULTS: aggregation
    : 
    : 
    : 

#+begin_src python :session pbm :results output :exports none
  N = np.random.rand(14)
  beta = np.random.rand(10,10)
  L = np.random.rand(10)
  print(np.shape(N))

  dNdt = aggregation(N,beta,L)
  print(dNdt)
  #+end_src

#+RESULTS:
: (14,)
: [-0.93299022 -0.85642084 -1.59429781  0.12516238 -0.26061048 -0.26428762
:  -0.22911258 -0.14038448  0.06171939  0.05972221 -4.03150005 -2.65290608
:  -1.86141458 -1.40415005]
: 
: 

*** Testing the model
- Analytical solution with constant coalescence kernel by Gelbard and Seinfield (1978) with dimensionless length and number is
\begin{equation}
\tilde{N}_i=\frac{2}{\tau+2}\left[\exp\left(-\frac{2\tilde{L}_i^3}{\tau+2}\right)-\exp\left(-\frac{4\tilde{L}_i^3}{\tau+2}\right)\right]
\end{equation}
#+name: analytic solution with constant kernel
#+begin_src python :session pbm :results output
  def const_kernel(t,L):
      N = 2/(t+2)*(np.exp(-2*np.power(L,3)/(t+2))-np.exp(-4*np.power(L,3)/(t+2)))
      return N

  def const_kernel_mat(tau,L):
      N = []
      for i in range(tau):
          nt = const_kernel(tau[i],L)
#+end_src

#+RESULTS: analytic solution with constant kernel
: 
: 
: 

#+begin_src python :session pbm :results link :file images/analytic.png :exports none
  tau = np.array([0,0.25,1.0,2.0])
  xx = np.linspace(0.1,10,300)
  N = constant_kernel(tau,xx)

  plt.figure(2)
  plt.clf()
  for i in range(len(tau)):
      plt.plot(xx,N[:,i])
  plt.xscale("log")
  plt.savefig('images/analytic.png')
#+end_src

#+RESULTS:
[[file:images/analytic.png]]


#+name: constant beta test
#+begin_src python :session pbm :results output
  from scipy.integrate import Radau
  from scipy.integrate import odeint

  tau = [0, 0.25, 1.0, 2.0]

  # initial condition
  n = 20
  L = np.zeros(n)
  L[0] = 1e-1
  for i in range(n-1):
      L[i+1] = L[i]*2**(1/3)
  # N0 = np.exp(-2*np.power(L,3)/2)-np.exp(-4*np.power(L,3)/2)
  N0 = constant_kernel(0,L)
  print(N0)
  m00 = np.sum(N0)
  m10 = np.sum(L@N0)
  m20 = np.sum(np.power(L,2)@N0)
  m30 = np.sum(np.power(L,3)@N0)
  Y0=np.append(N0,[m00,m10,m20,m30])

  beta = np.ones((n,n))

  def dydx(y,t):
      return aggregation(y,beta,L)

  result = odeint(dydx,Y0,tau)

  for i in range(len(tau)):
      plt.scatter(L,result)
  plt.savefig('images/const.png')
#+end_src

#+RESULTS: constant beta test
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/var/folders/4y/r60ctpmd6cb79y6hfptvf7pr0000gp/T/babel-ThlGyW/python-OVrikx", line 13, in <module>
:     N0 = constant_kernel(0,L)
:   File "/var/folders/4y/r60ctpmd6cb79y6hfptvf7pr0000gp/T/babel-ThlGyW/python-BZXYps", line 2, in constant_kernel
:     N = np.zeros((len(L),len(t)))
: TypeError: object of type 'int' has no len()
: 
: 

#+begin_src python :export none :results output
  import numpy as np

  def test(t,L):
      n = t*np.log(L)
      return n

  L = np.array([1,2,3])

  d = test(0.5,L)
  dd = test(2,L)

  a = [[]]
  print(a)
  
 #+end_src

#+RESULTS:
: [[]]
: [array([0.        , 0.34657359, 0.54930614])]
